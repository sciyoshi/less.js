#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    sys = require('sys');

require.paths.unshift(path.join(__dirname, '..', 'lib'));

var less = require('less');
var args = process.argv.slice(1);
var options = {
    compress: false,
    optimization: 1,
    silent: false,
    watch: false
};

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            sys.puts("lessc " + less.version.join('.') + " (LESS Compiler) [JavaScript]");
            process.exit(0);
        case 'verbose':
            options.verbose = true;
            break;
        case 's':
        case 'silent':
            options.silent = true;
            break;
        case 'w':
        case 'watch':
            options.watch = true;
            break;
        case 'h':
        case 'help':
            sys.puts("usage: lessc source [destination]");
            process.exit(0);
        case 'x':
        case 'compress':
            options.compress = true;
            break;
        case 'O0': options.optimization = 0; break;
        case 'O1': options.optimization = 1; break;
        case 'O2': options.optimization = 2; break;
    }
});

var input = args[1];
if (input && input[0] != '/') {
    input = path.join(process.cwd(), input);
}
var output = args[2];
if (output && output[0] != '/') {
    output = path.join(process.cwd(), output);
}

var css, fd, tree;

var compile = function(input, output, callback) {
    fs.readFile(input, 'utf-8', function (e, data) {
        if (e) {
            callback && callback(e);
            return;
        }

        new(less.Parser)({
            paths: [path.dirname(input)],
            optimization: options.optimization,
            filename: input
        }).parse(data, function (err, tree) {
            if (err) {
                callback && callback(err);
                return;
            }
            try {
                css = tree.toCSS({ compress: options.compress });
                if (output) {
                    fd = fs.openSync(output, "w");
                    fs.writeSync(fd, css, 0, "utf8");
                } else {
                    sys.print(css);
                }
                callback && callback();
            } catch (err) {
                callback && callback(err);
            }
        });
    });
};

var changeExtension = function(f) {
    return path.join(path.dirname(f), path.basename(f, '.less') + '.css');
};

if (options.watch) {
    try {
        var stat = fs.statSync(input);
    } catch (e) {
        sys.puts("[ERROR] " + e.message);
        return;
    }

    if (!stat.isDirectory()) {
        compile(input, changeExtension(input), function(err) {
            if (err) {
                console.log('* [ERROR] `' + input + '`: ' + err.message);
            } else {
                sys.puts('* Watching for changes in `' + input + '`');
            }
        });

        fs.watchFile(input, function(curr, prev) {
            if (curr.nlink === 0) {
                sys.puts('* Removed `' + input + '`, exiting...');
                process.exit(0);
            } else {
                compile(input, changeExtension(input), function(err) {
                    if (err) {
                        console.log('* [ERROR] `' + input + '`: ' + err.message);
                    } else {
                        sys.puts(': Change detected... * [Updated] `' + input + '`');
                    }
                });
            }
        });
    } else {
        try {
            var watch = require('watch');
        } catch (e) {
            sys.puts("lessc: `watch` module required to watch directories");
            process.exit(1);
        }

        watch.watchTree(input, function(f, curr, prev) {
            if (typeof f === 'object' && curr === null && prev === null) {
                for (var k in f) {
                    if (path.extname(k) === '.less') {
                        (function(k) {
                            compile(k, changeExtension(k), function(err) {
                                if (err) {
                                    console.log('* [ERROR] `' + k + '`: ' + err.message);
                                } else {
                                    console.log('* Watching for changes in `' + k + '`...');
                                }
                            });
                        })(k);
                    }
                }
                return;
            }

            if (path.extname(f) !== '.less') {
                return;
            }

            if (curr.nlink === 0) {
                // file removed
            } else {
                // file changed or added
                console.log(': Change detected... * [Updated] ' + f);
                compile(f, path.join(path.dirname(f), path.basename(f, '.less') + '.css'));
            }
        });
    }
} else {

    if (! input) {
        sys.puts("lessc: no input files");
        process.exit(1);
    }

    compile(input, output, function(err) {
        if (err) {
            less.writeError(err, options);
            process.exit(1);
        }
    });
}
